/***************************************************************
* Programmer: Pheobe Hill
* BroncoNetID: Pzs0022
* Lab 5: Student list
* CIS 2600: Business Application Programming Fall 2023
*
* Due date: 12/07/2023
* Date completed: 12/05/2023
****************************************************************
The purpose of this lab is to to enter a student’s WIN (no dashes), first name, 
* last name, and semester GPA. Make sure to validate entries when appropriate and catch exceptions.
 the student’s GPA is 2.0 or above his/her information is written to a sequential file named StudentsGoodStanding.txt. 
 * If the student’s GPA is below 2.0 his/her information is written to a sequential file named StudentsAcademicProbation.txtOnce 
 * all information is entered, the program will display both lists read from the files with appropriate headings.
**********************************************************************/
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Represents a student with WIN, first name, last name, and GPA
class Student {
    private String WIN;
    private String firstName;
    private String lastName;
    private double gpa;

    // Constructor to initialize the student object
    public Student(String WIN, String firstName, String lastName, double gpa) {
        this.WIN = WIN;
        this.firstName = firstName;
        this.lastName = lastName;
        this.gpa = gpa;
    }

    // Getter methods for accessing private fields
    public String getWIN() {
        return WIN;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public double getGpa() {
        return gpa;
    }
}

public class StudentLists {
    // File paths for good standing and academic probation students
    private static final Path GOOD_STANDING_FILE = Paths.get("StudentsGoodStanding.txt");
    private static final Path ACADEMIC_PROBATION_FILE = Paths.get("StudentsAcademicProbation.txt");

    // Lists to store students in good standing and academic probation
    private static List<Student> goodStandingList = new ArrayList<>();
    private static List<Student> academicProbationList = new ArrayList<>();

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            // Loop for entering student information
            while (true) {
                System.out.println("Enter student information WIN, first name, last name, GPA or type 'list' to display student list: ");
                String win = scanner.next();
                
                // Exit loop if the user enters "list"
                if (win.equalsIgnoreCase("list")) {
                    break;
                }

                String firstName = scanner.next();
                String lastName = scanner.next();
                double gpa = scanner.nextDouble();

                try {
                    // Validate input before creating a student object
                    validateInput(win, firstName, lastName, gpa);
                    Student student = new Student(win, firstName, lastName, gpa);
                    processStudent(student);
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input. Please try again. " + e.getMessage());
                }
            }

            // Write student information to files and display lists
            writeToFile(GOOD_STANDING_FILE, goodStandingList);
            writeToFile(ACADEMIC_PROBATION_FILE, academicProbationList);

            displayLists();
        } catch (IOException e) {
            System.out.println("An error occurred while processing files: " + e.getMessage());
        }
    }

    // Validate input for student information
    private static void validateInput(String win, String firstName, String lastName, double gpa) {
        // Add validation logic here
        if (gpa < 0 || gpa > 4.0) {
            throw new IllegalArgumentException("GPA should be between 0 and 4.0");
        }
        // Add more validation checks as needed
    }

    // Process student information and categorize into good standing or academic probation
    private static void processStudent(Student student) {
        if (student.getGpa() >= 2.0) {
            goodStandingList.add(student);
        } else {
            academicProbationList.add(student);
        }
    }

    // Write student information to the specified file
    private static void writeToFile(Path filePath, List<Student> studentList) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {
            for (Student student : studentList) {
                // Format and write student information to the file
                writer.write(String.format("%s %s %s %.2f%n", student.getWIN(), student.getFirstName(),
                        student.getLastName(), student.getGpa()));
            }
        }
    }

    // Display lists of students in good standing and academic probation
    private static void displayLists() throws IOException {
        System.out.println("WMU - Student Lists\n");

        System.out.println("Students in Good Standing:");
        displayStudents(GOOD_STANDING_FILE);

        System.out.println("\nStudents on Academic Probation:");
        displayStudents(ACADEMIC_PROBATION_FILE);
    }

    // Display student information from the specified file
    private static void displayStudents(Path filePath) throws IOException {
        List<String> lines = Files.readAllLines(filePath);
        for (String line : lines) {
            System.out.println(line);
        }
    }
}
